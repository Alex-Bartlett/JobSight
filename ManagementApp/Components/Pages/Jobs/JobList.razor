@page "/jobs"
@inject IJobService jobService;
@inject IUserService userService;
@attribute [StreamRendering];

<h3>Jobs</h3>
<a href="/jobs/edit">New job</a>
@if (jobs == null)
{
    <span>Loading...</span>
}
else if (jobs.Count() == 0)
{
    <span>No jobs found</span>
}
else
{
    <table>
        <thead>
            <tr>
                <th>
                    Id
                </th>
                <th>
                    Reference
                </th>
                <th>
                    Customer
                </th>
                <th>
                    Actions
                </th>
            </tr>
        </thead>
        <tbody>
        @foreach (Job job in jobs)
        {
            <tr>
                <td>
                    @job.Id
                </td>
                <td>
                    @job.Reference
                </td>
                <td>
                    @job.Customer?.Name
                </td>
                <td>
                    <a href="/job/@job.Id">View</a>
                    <a href="/jobs/edit/@job.Id">Edit</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    IEnumerable<Job>? jobs = null;
    int? currentCompanyId;

    protected override async Task OnInitializedAsync()
    {
        await SetCurrentCompanyId();
        if (currentCompanyId is not null)
        {
            jobs = await jobService.GetAllAsync(currentCompanyId.Value);
        }
        else {
            jobs = new List<Job>();
        }
    }

    private async Task SetCurrentCompanyId() {
        var user = await userService.GetCurrentUserAsync();
        if (user?.CurrentCompanyId is not null)
        {
            currentCompanyId = user.CurrentCompanyId.Value;
        }
    }
}
