@page "/job/{JobId:int}/tasks/edit";
@page "/job/{JobId:int}/tasks/edit/{TaskId:int}";
@inject NavigationManager navigationManager;
@inject ITaskService taskService;
@inject IUserService userService;
@inject ILogger<EditTask> logger;
@rendermode @(new InteractiveServerRenderMode(false))

<FormErrorBanner @ref="formErrorBanner" OnNotificationSent="@RefreshComponents"></FormErrorBanner>

@if (PageIsLoading)
{
    <p>Loading...</p>
}
else
{
    @if (TaskId is null)
    {
        <h3>Create task</h3>
    }
    else
    {
        <h3>Editing task</h3>
    }

    @if (CurrentUser is null)
    {
        <p>Please sign in.</p>
    }
    else if (Unauthorized)
    {
        <p>You are not authorized to access this resource.</p>
    }
    else if (!DontShowForm)
    {
        <EditForm Model="CurrentTask" OnSubmit="HandleSubmit" FormName="TaskForm">
            <HxInputText @bind-Value="CurrentTask.Description"
                         Label="Task description" />
            <HxInputDate @bind-Value="CurrentTask.StartDateTime"
                         Label="Start date" 
                         CalendarIcon="BootstrapIcon.Calendar"/>
            <HxInputDate @bind-Value="CurrentTask.EndDateTime"
                         Label="End date" />
            <HxButton type="submit" Color="ThemeColor.Primary">
                @if (TaskId is null)
                {
                    <span>Create</span>
                }
                else
                {
                    <span>Update</span>
                }
            </HxButton>
        </EditForm>
    }
}

@code {
    [Parameter]
    public int? TaskId { get; set; }
    [Parameter]
    public int? JobId { get; set; }

    [Parameter]
    public EventCallback OnTaskCreated { get; set; }

    [SupplyParameterFromForm]
    public JobTask CurrentTask { get; set; } = new();

    public User? CurrentUser;

    public bool PageIsLoading = true;

    public bool Unauthorized = false;

    // Adding this so the form can be hidden when there's an error. Submitting could cause further errors otherwise.
    public bool DontShowForm = false;

    public FormErrorBanner formErrorBanner;

    protected override async Task OnParametersSetAsync()
    {
        await InitializeData();
        PageIsLoading = false;
    }

    private async Task InitializeData()
    {
        CurrentUser = await userService.GetCurrentUserAsync();
        await PopulateCurrentTask();
    }

    private async Task PopulateCurrentTask()
    {
        if (JobId is null)
        {
            // Logging is usually handled in the service layer. However, since no services are involved in this check, we need to log here.
            DontShowForm = true;
            logger.LogError("JobId is null. Cannot create/edit task for non-existent job.");
            // Can't use the banner here, as it's not initialized yet. Need to find another way to do this.
            // await formErrorBanner.ShowError("Job was not found. Cannot create/edit task for non-existent job.");
            return;
        }

        try
        {
            if (TaskId is not null && CurrentUser is not null)
            {
                var task = await taskService.GetByIdAsync(TaskId.Value, CurrentUser);
                if (task is not null)
                {
                    if (task.JobId is not null && task.JobId != JobId)
                    {
                        DontShowForm = true;
                        logger.LogError("Task does not belong to job. Cannot edit task that does not belong to job.");

                        // Again, can't use the banner here, as it's not initialized yet. Need to find another way to do this.
                        //await formErrorBanner.ShowError("Task does not belong to job. Cannot edit task that does not belong to job.");
                        return;
                    }

                    CurrentTask.Id = task.Id;
                    CurrentTask.Description ??= task.Description;
                    CurrentTask.StartDateTime ??= task.StartDateTime;
                    CurrentTask.EndDateTime ??= task.EndDateTime;
                    CurrentTask.Images ??= task.Images;
                    CurrentTask.UserId = task.UserId;
                    // If null, set CurrentTask's jobId to that of the url parameter (JobId)
                    if (task.JobId is null)
                    {
                        CurrentTask.JobId = JobId.Value;
                    }
                }
            }
            else
            {
                CurrentTask.JobId = JobId.Value;
                // The form won't be shown if the user is null, null coalescing is used just to suppress the warning (a check isn't necessary).
                CurrentTask.UserId = CurrentUser?.Id;
            }
        }
        catch (UnauthorizedAccessException)
        {
            Unauthorized = true;
        }
    }

    public async Task HandleSubmit()
    {
        // Add auditing (see JobSightDbContext). Null coalescing is handled there, so it's safe to set null values here.
        CurrentTask.CreatedBy = CurrentUser?.NormalizedEmail;
        CurrentTask.UpdatedBy = CurrentUser?.NormalizedEmail;

        // HxInputDate does not supply dates in UTC, so this needs to be done manually.
        if (CurrentTask.StartDateTime is not null)
        {
            CurrentTask.StartDateTime = DateTime.SpecifyKind(CurrentTask.StartDateTime.Value, DateTimeKind.Utc);
        }
        if (CurrentTask.EndDateTime is not null)
        {
            CurrentTask.EndDateTime = DateTime.SpecifyKind(CurrentTask.EndDateTime.Value, DateTimeKind.Utc);
        }

        JobTask? newTask;
        if (TaskId is null)
        {
            newTask = await taskService.CreateAsync(CurrentTask);
        }
        else
        {
            newTask = await taskService.UpdateAsync(CurrentTask);
        }

        if (newTask is not null)
        {
            navigationManager.NavigateTo($"/job/{JobId}");
            await OnTaskCreated.InvokeAsync();
        }
        else
        {
            await formErrorBanner.ShowError("Error creating/updating task.");
        }
    }


    void RefreshComponents()
    {
        // I have no idea why this is necessary for the notification to update, but apparently it is.
        StateHasChanged();
    }
}
