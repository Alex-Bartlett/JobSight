@inject ITaskImageService taskImageService;
@inject IConfiguration configuration;

<InputFile OnChange="LoadFile" accept="@AllowedExtensions"/>
<p class="text-danger">@ErrorMessage</p>

@code {
    [Parameter]
    public int? JobTaskId { get; set; }

    [Parameter]
    public EventCallback<JobTaskImage> OnImageUploaded { get; set; }

    private long _maxFileSize = 0;
    public long MaxFileSize 
    { 
        get => _maxFileSize;
        set => _maxFileSize = value * 1024; // Convert from kb to bytes
    }

    public string AllowedExtensions { get; set; } = string.Empty;

    public string ErrorMessage { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        MaxFileSize = configuration.GetValue<long>("ImageUploadConfig:MaxSizeInKb");
        var allowedExtensionsList = configuration.GetSection("ImageUploadConfig:AllowedExtensions").Get<string[]>() ?? [];
        AllowedExtensions = string.Join(",", allowedExtensionsList);
    }

    public async Task LoadFile(InputFileChangeEventArgs e)
    {
        if (JobTaskId is null)
        {
            return;
        }

        JobTaskImage jobTaskImage = new()
        {
            JobTaskId = JobTaskId.Value,
            Caption = "none"
        };

        try
        {
            using (var memoryStream = new MemoryStream())
            {
                await e.File.OpenReadStream(MaxFileSize).CopyToAsync(memoryStream);
                var res = await taskImageService.AddImage(jobTaskImage, memoryStream);
                // Invoke the event callback with the new job task image
                await OnImageUploaded.InvokeAsync(res);
                ErrorMessage = string.Empty;
            }
        }
        catch (IOException)
        {
            // File size out of bounds (thrown by file stream)
            ErrorMessage = $"File size is too large. Maximum size: {MaxFileSize/1024}KB";

        }
        catch (ArgumentException)
        {
            // Invalid file type (thrown by image upload service)
            ErrorMessage = $"Invalid file type. Allowed types: {AllowedExtensions}";
        }
    }


}
