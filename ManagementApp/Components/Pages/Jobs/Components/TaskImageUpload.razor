@inject ITaskImageService taskImageService;
@inject IConfiguration configuration;
@inject IJSRuntime JSRuntime;

<InputFile style="display:none;" @ref="filePicker" OnChange="LoadFile" accept="@AllowedExtensions" />

<div class="upload m-1">
    <button type="button" @onclick="OpenFilePicker">
        <div class="d-flex flex-column align-items-center justify-items-center">
            <i class="bi-cloud-arrow-up"></i>
            <div class="button-text">Upload Image</div>

        </div>
    </button>
    <p class="text-danger">@ErrorMessage</p>
</div>


@code {
    [Parameter]
    public int? JobTaskId { get; set; }

    [Parameter]
    public EventCallback<JobTaskImage> OnImageUploaded { get; set; }

    private InputFile filePicker;

    private long _maxFileSize = 0;
    public long MaxFileSize 
    { 
        get => _maxFileSize;
        set => _maxFileSize = value * 1024; // Convert from kb to bytes
    }

    public string AllowedExtensions { get; set; } = string.Empty;

    public string ErrorMessage { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        MaxFileSize = configuration.GetValue<long>("ImageUploadConfig:MaxSizeInKb");
        var allowedExtensionsList = configuration.GetSection("ImageUploadConfig:AllowedExtensions").Get<string[]>() ?? [];
        AllowedExtensions = string.Join(",", allowedExtensionsList);
    }

    public async Task LoadFile(InputFileChangeEventArgs e)
    {
        if (JobTaskId is null)
        {
            return;
        }

        JobTaskImage jobTaskImage = new()
        {
            JobTaskId = JobTaskId.Value,
            Caption = "none"
        };

        try
        {
            using (var memoryStream = new MemoryStream())
            {
                await e.File.OpenReadStream(MaxFileSize).CopyToAsync(memoryStream);
                var res = await taskImageService.AddImage(jobTaskImage, memoryStream);
                // Invoke the event callback with the new job task image
                await OnImageUploaded.InvokeAsync(res);
                ErrorMessage = string.Empty;
            }
        }
        catch (IOException)
        {
            // File size out of bounds (thrown by file stream)
            ErrorMessage = $"File size is too large. Maximum size: {MaxFileSize/1024}KB";

        }
        catch (ArgumentException)
        {
            // Invalid file type (thrown by image upload service)
            ErrorMessage = $"Invalid file type. Allowed types: {AllowedExtensions}";
        }
    }

    // Solution for styling the input file button by using a custom button https://stackoverflow.com/a/78360995
    private async Task OpenFilePicker() => await JSRuntime.InvokeVoidAsync("HTMLElement.prototype.click.call", filePicker.Element);


}
