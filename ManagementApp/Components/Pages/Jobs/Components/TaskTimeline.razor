<h3 class="mt-3">Timeline</h3>

@if (JobTasks.Any())
{
    <div>
    @foreach (JobTask task in JobTasks)
    {
        <TaskCard Task="@task" TaskDeleted="TaskDeleted" HideControls="HideControls"/>
    }
    </div>
}
else
{
    <p class="text-secondary text-center pt-5 fs-4">No tasks yet!</p>
}

@code {
    [Parameter]
    public IEnumerable<JobTask> JobTasks { get; set; } = [];
    [Parameter]
    public bool HideControls { get; set; } = false;
    [Parameter]
    public EventCallback<IEnumerable<JobTask>> OnTimelineUpdate { get; set; }

    protected override void OnParametersSet()
    {
        // Order tasks by start date, just in case this isn't done in query
        if (JobTasks.Any())
        {
            JobTasks = JobTasks.OrderByDescending(t => t.StartDateTime).ThenByDescending(t => t.CreatedOn); // StartDateTime has time 0000, so CreatedOn is used as secondary sort for chronological order
        }
    }

    public async Task TaskDeleted(int id)
    {
        // Remove the task from the list
        var task = JobTasks.FirstOrDefault(t => t.Id == id);
        if (task is not null)
        {
            JobTasks = JobTasks.Where(t => t.Id != id);
        }

        await OnTimelineUpdate.InvokeAsync(JobTasks);
    }
}