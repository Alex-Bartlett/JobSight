@inject IUserService userService;
@inject ITaskService taskService;
@inject Supabase.Client supabase;

@if (Task is not null && !deleted)
{
    <div class="border rounded my-3 p-3">
        <div class="d-flex justify-content-between flex-wrap">
            <div class="rounded bg-primary text-white px-2 fw-bold" style="width: fit-content;">
                @if (Task.User is not null && Task.User.UserName != string.Empty)
                {
                    <span>@Task.User?.UserName</span>
                }
                else
                {
                    <span>Unassigned</span>
                }
            </div>
            <div class="text-secondary">
                @if (Task.StartDateTime is not null)
                {
                    <span>@Task.StartDateTime.Value.ToShortDateString()</span>
                }
            </div>
        </div>
        <div class="">
            <h5 class="mt-3">@Task.Description</h5>
        </div>

        <div class="d-flex flex-wrap">
            @if (Task.Images is not null) 
            {
                @foreach (var jobTaskImage in Task.Images)
                {
                    <TaskImage JobTaskImage="@jobTaskImage" JobTaskId="Task.Id"/>
                }
            }
            @if (HideControls == false)
            {
                @*An unset task image to allow for uploading more images*@
                <TaskImage JobTaskId="Task.Id"/>
            }
        </div>
        @if (HideControls == false)
        {
            <HxButton @onclick="DeleteClicked" Color="ThemeColor.Danger">Delete</HxButton>
        }
    </div>


}
@code {
    [Parameter]
    public JobTask? Task { get; set; }
    [Parameter]
    public bool HideControls { get; set; } = false;
    [Parameter]
    public EventCallback<int> TaskDeleted { get; set; }
    [Parameter]
    public EventCallback<JobTaskImage> OnImageClicked { get; set; }
    private bool deleted = false;


    public List<string> BucketContents = [];

    public async Task DeleteClicked()
    {
        var user = await userService.GetCurrentUserAsync();
        if (user is not null && Task is not null)
        {
            await taskService.DeleteAsync(Task.Id, user);
            // Now we need to refresh the parent component
            await TaskDeleted.InvokeAsync(Task.Id);
        }
    }

    private async Task<List<string>> GetBucketContents()
    {
        var supabaseStorage = supabase.Storage;

        var res = await supabaseStorage.From("task-images").List();
        List<string> names = [];
        if (res is not null) {
            res.ForEach(i => names.Add(i.Name ?? "Name not found"));
        }
        return names;
    }

    public async Task LoadBucketContents()
    {
        BucketContents = await GetBucketContents();
    }
}
