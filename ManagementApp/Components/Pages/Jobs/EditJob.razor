@page "/jobs/edit";
@page "/jobs/edit/{Id:int}";
@inject IJobService jobService;
@inject ICustomerService customerService;

@if (Id is null)
{
    
}

<h3>EditJob</h3>

<EditForm Model="CurrentJob" OnSubmit="HandleSubmit" FormName="JobForm">
    <label for="reference">Reference</label>
    <InputText @bind-Value="CurrentJob.Reference"></InputText>
    <label for="address">Address</label>
    <InputText @bind-Value="CurrentJob.Address"></InputText>
    <label for="description">Description</label>
    <InputText @bind-Value="CurrentJob.Description"></InputText>
    <label for="customer">Customer</label>
    @* <InputSelect @bind-Value="CurrentJob.Customer" @>
        @foreach 
    </InputSelect> *@
</EditForm>

    @code {
    [Parameter]
    public int? Id { get; set; } = null;

    [SupplyParameterFromForm]
    public Job CurrentJob { get; set; } = new();

    public List<Customer>? AllCustomers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // AllCustomers = await customerService.GetAllAsync(); // This needs creating and implementing
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is not null)
        {
            // Try to get job with id
            var job = await jobService.GetByIdAsync(Id.Value);

            if (job is not null)
            {
                CurrentJob.Id = job.Id;
                CurrentJob.Reference ??= job.Reference;
                CurrentJob.Address ??= job.Address;
                CurrentJob.Description ??= job.Description;
                CurrentJob.Customer ??= job.Customer;
                CurrentJob.CustomerId = job.CustomerId;
                CurrentJob.Company ??= job.Company;
                CurrentJob.CompanyId = job.Id;
            }
        }
    }

    async Task HandleSubmit()
    {
        
    }
}
