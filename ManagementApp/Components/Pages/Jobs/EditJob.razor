@page "/jobs/edit";
@page "/jobs/edit/{Id:int}";
@inject NavigationManager navigationManager;
@inject IJobService jobService;
@inject ICustomerService customerService;
@inject IUserService userService;

@if (Id is null)
{
    <h3>Create job</h3>
}
else
{
    <h3>Edit job</h3>
}

@if (CurrentUser?.CurrentCompany is null)
{
    <p>You shouldn't be here</p>
}
else {
<EditForm Model="CurrentJob" OnSubmit="HandleSubmit" FormName="JobForm">
    <label for="reference">Reference</label>
    <InputText @bind-Value="CurrentJob.Reference"></InputText>
    <label for="address">Address</label>
    <InputText @bind-Value="CurrentJob.Address"></InputText>
    <label for="description">Description</label>
    <InputText @bind-Value="CurrentJob.Description"></InputText>
    <label for="customer">Customer</label>
    <InputSelect @bind-Value="CurrentJob.CustomerId" @>
        @if (Customers is not null){
            @foreach (Customer customer in Customers)
            {
                <option value="@customer.Id">@customer.Name</option>
            }
        }
        else {
            <option>-- No customers --</option>
        }
    </InputSelect>
    <button type="submit">Create</button>
</EditForm>
}

@code {
    [Parameter]
    public int? Id { get; set; } = null;

    [SupplyParameterFromForm]
    public Job CurrentJob { get; set; } = new();

    public IEnumerable<Customer>? Customers { get; set; }

    public User? CurrentUser;

    protected override async Task OnInitializedAsync()
    {
        await InitalizeData();
    }

    protected override async Task OnParametersSetAsync()
    {

        if (Id is not null)
        {
            // Try to get job with id
            var job = await jobService.GetByIdAsync(Id.Value);

            if (job is not null)
            {
                CurrentJob.Id = job.Id;
                CurrentJob.Reference ??= job.Reference;
                CurrentJob.Address ??= job.Address;
                CurrentJob.Description ??= job.Description;
                CurrentJob.Customer ??= job.Customer;
                CurrentJob.CustomerId = job.CustomerId;
                CurrentJob.Company ??= job.Company;
                CurrentJob.CompanyId = job.CompanyId;
            }
        }
    }

    // TODO: Figure out why models are coming through as null in entities. e.g. companyId is set but company is null. 

    private async Task InitalizeData()
    {
        await UpdateCurrentCompany();
        await UpdateCustomerList();
    }

    private async Task UpdateCurrentCompany()
    {
        var user = await userService.GetCurrentUserWithNavigationsAsync();
        CurrentUser = user;
    }

    private async Task UpdateCustomerList()
    {
        if (CurrentUser?.CurrentCompanyId is not null)
        {
            Customers = await customerService.GetAllAsync(CurrentUser.CurrentCompanyId.Value);
        }
    }

    async Task HandleSubmit()
    {
        // It's probably not necessary to have this in an if block, but otherwise it *may* be possible to accidentally give the job to a different company.
        // So effectively, companyId won't be changed when editing a job.
        if (CurrentJob.CompanyId is null)
        {
            CurrentJob.CompanyId = CurrentUser!.CurrentCompanyId!.Value;
        }

        // Add auditing (see JobSightDbContext)
        CurrentJob.CreatedBy = CurrentUser?.NormalizedEmail;
        CurrentJob.UpdatedBy = CurrentUser?.NormalizedEmail;

        var newJob = await jobService.CreateAsync(CurrentJob);
        if (newJob is not null)
        {
            navigationManager.NavigateTo($"/job/{newJob.Id}");
        }
        else
        {
            throw new Exception("Job failed to create");
        }
    }
}
