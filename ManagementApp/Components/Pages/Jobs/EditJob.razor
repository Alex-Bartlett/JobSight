@page "/jobs/edit";
@page "/jobs/edit/{Id:int}";
@inject NavigationManager navigationManager;
@inject IJobService jobService;
@inject ICustomerService customerService;
@inject IUserService userService;

<FormErrorBanner @ref="formErrorBanner" OnNotificationSent="@RefreshComponents"></FormErrorBanner>

@if (Id is null)
{
    <h3>Create job</h3>
}
else
{
    <h3>Edit job</h3>
}

@if (CurrentUser is null)
{
    <p>Please sign in.</p>
}
else if (Unauthorized)
{
    <p>You are not authorized to access this resource.</p>
}
else {
    <div class="container container-fluid p-0 ms-0">
        <div class="row">
            <EditForm Model="CurrentJob" OnSubmit="HandleSubmit" FormName="JobForm" class="col-6">
                <HxInputText @bind-Value="CurrentJob.Reference"
                    Label="Reference"/>
                <HxInputText @bind-Value="CurrentJob.Address"
                    Label="Address"/>
                <HxInputText @bind-Value="CurrentJob.Description"
                    Label="Description"/>
                @*Compromise for broken HxSelect (value is set to index rather than given value)*@
                <div class="form-group position-relative">
                    <label class="form-label" for="customer">Customer</label>
                    <InputSelect @bind-Value="CurrentJob.CustomerId" class="form-select">
                        @if (Customers is not null)
                        {
                            foreach (var customer in Customers)
                            {
                                <option value="@customer.Id">@customer.Name</option>
                            }
                        }
                    </InputSelect>
                </div>
                <HxButton type="submit" Color="ThemeColor.Primary">
                    @if (Id is null)
                    {
                        <span>Create</span>
                    }
                    else
                    {
                        <span>Update</span>
                    }
                </HxButton>
            </EditForm>
        </div>
    </div>

}


@code {
    [Parameter]
    public int? Id { get; set; } = null;

    [SupplyParameterFromForm]
    public Job CurrentJob { get; set; } = new();

    public IEnumerable<Customer>? Customers { get; set; }

    public User? CurrentUser;

    public bool Unauthorized = false;

    public FormErrorBanner formErrorBanner;

    protected override async Task OnParametersSetAsync()
    {
        await InitalizeData();

        if (Id is not null && CurrentUser is not null)
        {
            // Try to get job with id
            try
            {
                var job = await jobService.GetByIdAsync(Id.Value, CurrentUser);

                if (job is not null)
                {
                    CurrentJob.Id = job.Id;
                    CurrentJob.Reference ??= job.Reference;
                    CurrentJob.Address ??= job.Address;
                    CurrentJob.Description ??= job.Description;
                    CurrentJob.Customer ??= job.Customer;
                    CurrentJob.CustomerId ??= job.CustomerId;
                    CurrentJob.Company ??= job.Company;
                    CurrentJob.CompanyId ??= job.CompanyId;
                }
            }
            catch (UnauthorizedAccessException)
            {
                Unauthorized = true;
            }

        }
    }

    private async Task InitalizeData()
    {
        await UpdateCurrentCompany();
        await UpdateCustomerList();
    }

    private async Task UpdateCurrentCompany()
    {
        var user = await userService.GetCurrentUserWithNavigationsAsync();
        CurrentUser = user;
    }

    private async Task UpdateCustomerList()
    {
        if (CurrentUser?.CurrentCompanyId is not null)
        {
            Customers = await customerService.GetAllAsync(CurrentUser.CurrentCompanyId.Value);
        }
    }

    async Task HandleSubmit()
    {
        // Necessary when creating a job
        if (CurrentJob.CompanyId is null)
        {
            CurrentJob.CompanyId = CurrentUser!.CurrentCompanyId!.Value;
        }

        // Add auditing (see JobSightDbContext)
        CurrentJob.CreatedBy = CurrentUser?.NormalizedEmail;
        CurrentJob.UpdatedBy = CurrentUser?.NormalizedEmail;

        Job? newJob;

        // Whether to create a job or update an existing one
        if (Id is null)
        {
            newJob = await jobService.CreateAsync(CurrentJob);
        }
        else
        {
            newJob = await jobService.UpdateAsync(CurrentJob);
        }

        if (newJob is not null)
        {
            navigationManager.NavigateTo($"/job/{newJob.Id}");
        }
        else // Error handling
        {
            await formErrorBanner.ShowError("Error creating/updating job.");
        }        
    }

    void RefreshComponents()
    {
        // I have no idea why this is necessary for the notification to update, but apparently it is.
        StateHasChanged();
    }
}
