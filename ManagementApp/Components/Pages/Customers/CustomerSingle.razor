@page "/customer/{id:int}"
@inject ICustomerService customerService
@inject IUserService userService
@inject NavigationManager navigationManager

@if (Customer is null)
{
    <h3>Customer not found</h3>
    @if (CurrentUser?.CurrentCompany is not null)
    {
        <p>A customer for @CurrentUser.CurrentCompany.Name could not be found at this address.</p>
    }
    else
    {
        <!--The user shouldn't be able to access this page if they're not signed in anyway. This is an error if this user sees this. -->
        <p>Please sign in</p>
    }
}
else
{
    <h3>Customer</h3>
    <h4><span><b>Name: </b></span>@Customer.Name</h4>
    <p><span><b>Address: </b></span>@Customer.Address</p>
    <p><span><b>Postcode: </b></span>@Customer.Postcode</p>
}

@code {
    [Parameter]
    public int? Id { get; set; } = null;

    public Customer? Customer;
    public User? CurrentUser;

    protected override async Task OnParametersSetAsync()
    {
        CurrentUser = await userService.GetCurrentUserWithNavigationsAsync();

        if (Id is not null && CurrentUser is not null)
        {
            try
            {
                Customer = await customerService.GetByIdAsync(Id.Value, CurrentUser);
            }
            catch (UnauthorizedAccessException)
            {
                Customer = null;
            }
        }
    }
}
