@page "/Developer"
@inject ICompanyService companyService;
@inject IUserService userService;
@inject ILogger<DeveloperSettings> logger;
@rendermode InteractiveServer
@attribute [Authorize]
@attribute [StreamRendering]

<h3>Developer Settings</h3>

<Toasts Messages="messages" AutoHide="true" Delay="3000" Placement="ToastsPlacement.TopRight" />

@*Both AuthorizeView and EditForm have a context of 'context'. It needs to be overridden to prevent ambiguity. https://stackoverflow.com/a/77385623*@
<AuthorizeView Context="AuthContext">
    @AuthContext.User.Identity?.Name;
    @if (AllCompanies is null)
    {
        <div>Loading companies...</div>
    }
    else if (CurrentUser is null)
    {
        <div>Please sign in to edit current company.</div>
    }
    else
    {    
        <EditForm Model="CurrentUser" OnSubmit="HandleSubmitCurrentCompany" FormName="CompanyForm">
            <label for="currentCompany">Current Company</label>
            <InputSelect @bind-Value="CurrentUser.CurrentCompanyId">
                @if (AllCompanies is not null)
                {
                    @foreach (Company company in AllCompanies)
                    {
                        <option value="@company.Id">@company.Name</option>
                    }
                }
            </InputSelect>
            <button type="submit">Save</button>
        </EditForm>
    }
</AuthorizeView>

@code {
    [SupplyParameterFromForm(FormName = "CompanyForm")]
    public User CurrentUser { get; set; } = new();

    public IEnumerable<Company>? AllCompanies;

    protected override async Task OnInitializedAsync()
    {
        var user = await userService.GetCurrentUserAsync();
        if (user is not null)
        {
            CurrentUser.Id ??= user.Id;
            CurrentUser.CurrentCompanyId ??= user.CurrentCompanyId;
        }
        AllCompanies = await companyService.GetAllAsync();
    }

    public async Task HandleSubmitCurrentCompany()
    {
        int? currentCompanyId = CurrentUser?.CurrentCompanyId;

        if (currentCompanyId is not null)
        {
            var res = await userService.ChangeCurrentCompany(currentCompanyId.Value);
            if (res is not null)
            {
                // Success
                //toaster!.MakeToast(ToastType.Success, "Company updated successfully.");
                MakeToast(ToastType.Success, "Company updated successfully.");
                return;
            }
        }
        // Fail
        //toaster!.MakeToast(ToastType.Danger, "Failed to update company.");
        //toastService.ShowError("Failed to updated company.");
    }

    List<ToastMessage> messages = new();

    private void MakeToast(ToastType toastType, string message, string? title = null, string? helpText = null)
    {
        messages.Add(new ToastMessage
            {
                Type = toastType,
                Message = message,
                Title = title,
                HelpText = helpText,
            });
    }
}
